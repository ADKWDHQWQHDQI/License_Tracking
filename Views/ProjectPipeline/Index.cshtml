@model License_Tracking.ViewModels.ProjectPipelineListViewModel

@{
    ViewData["Title"] = "Project Pipeline";
}

<div class="container-fluid">
    <!-- Header with View Switcher -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-project-diagram"></i> Project Pipeline - List View</h2>
            <p class="text-muted mb-0">Track and manage future license projects</p>
        </div>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-primary active">
                <i class="fas fa-list"></i> List
            </button>
            <a asp-action="Index" asp-route-view="sheet" class="btn btn-outline-primary">
                <i class="fas fa-table"></i> Sheet
            </a>
            <a asp-action="Index" asp-route-view="kanban" class="btn btn-outline-primary">
                <i class="fas fa-columns"></i> Kanban
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-0">
                                <i class="fas fa-list"></i> Pipeline Projects
                            </h5>
                        </div>
                        <div>
                            <a asp-action="Create" class="btn btn-primary">
                                <i class="fas fa-plus"></i> New Project
                            </a>
                            <a asp-action="ExportToExcel" class="btn btn-success">
                                <i class="fas fa-file-excel"></i> Export
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Summary Cards -->
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title">Total Projects</h6>
                                            <h4 class="mb-0">@Model.TotalCount</h4>
                                        </div>
                                        <div class="ms-3">
                                            <i class="fas fa-list-ul fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title">Projected Revenue</h6>
                                            <h4 class="mb-0">@Model.TotalProjectedRevenue.ToString("C")</h4>
                                        </div>
                                        <div class="ms-3">
                                            <i class="fas fa-dollar-sign fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title">Projected Margin</h6>
                                            <h4 class="mb-0">@Model.TotalProjectedMargin.ToString("C")</h4>
                                        </div>
                                        <div class="ms-3">
                                            <i class="fas fa-chart-line fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-grow-1">
                                            <h6 class="card-title">Avg Success Rate</h6>
                                            <h4 class="mb-0">
                                                @if (Model.Projects.Any())
                                                {
                                                    @($"{Model.Projects.Average(p => p.SuccessProbability):F0}%")
                                                }
                                                else
                                                {
                                                    <text>N/A</text>
                                                }
                                            </h4>
                                        </div>
                                        <div class="ms-3">
                                            <i class="fas fa-percentage fa-2x"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Week 10 Enhancement: Advanced Pipeline Analytics -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card border-secondary">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="card-title mb-0">
                                            <i class="fas fa-chart-area"></i> Week 10 Enhanced Pipeline Analytics
                                        </h6>
                                        <div>
                                            <div class="btn-group">
                                                <a asp-action="PipelineAnalytics" class="btn btn-sm btn-primary">
                                                    <i class="fas fa-chart-area"></i> Analytics Dashboard
                                                </a>
                                                <a asp-action="DesktopReports" class="btn btn-sm btn-info">
                                                    <i class="fas fa-desktop"></i> Desktop Reports
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Estimated Revenue</h6>
                                                <h5 class="text-primary mb-0">
                                                    @Model.Projects.Sum(p => p.EstimatedRevenue).ToString("C")
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Estimated Margin</h6>
                                                <h5 class="text-success mb-0">
                                                    @Model.Projects.Sum(p => p.EstimatedMargin).ToString("C")
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Weighted Revenue</h6>
                                                <h5 class="text-info mb-0">
                                                    @Model.Projects.Sum(p => p.WeightedRevenue).ToString("C")
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Avg Margin %</h6>
                                                <h5 class="text-warning mb-0">
                                                    @if (Model.Projects.Any(p => p.EstimatedRevenue > 0))
                                                    {
                                                        @($"{Model.Projects.Where(p => p.EstimatedRevenue > 0).Average(p => p.MarginPercentage):F1}%")
                                                    }
                                                    else
                                                    {
                                                        <text>N/A</text>
                                                    }
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Pipeline Stages</h6>
                                                <h5 class="text-secondary mb-0">
                                                    @Model.Projects.Select(p => p.PipelineStage).Distinct().Count()
                                                </h5>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="text-center">
                                                <h6 class="text-muted">Avg Confidence</h6>
                                                <h5 class="text-dark mb-0">
                                                    @if (Model.Projects.Any())
                                                    {
                                                        @($"{Model.Projects.Average(p => p.StageConfidenceLevel):F1}/5")
                                                    }
                                                    else
                                                    {
                                                        <text>N/A</text>
                                                    }
                                                </h5>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Week 10 Enhanced: Advanced Desktop-First Bigin.com Style Filters -->
                    <form method="get" class="mb-4">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-light border-0">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="card-title mb-0">
                                        <i class="fas fa-filter text-primary"></i> Advanced Pipeline Filters
                                    </h6>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleAdvancedFilters()">
                                        <i class="fas fa-cog"></i> More Filters
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- Primary Filters Row -->
                                <div class="row g-3 mb-3">
                                    <div class="col-lg-2 col-md-3">
                                        <label class="form-label text-muted fw-semibold">Status</label>
                                        <select name="statusFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                            <option value="">All Statuses</option>
                                            <option value="Pipeline" selected="@(Model.StatusFilter == "Pipeline")">Pipeline</option>
                                            <option value="Lead" selected="@(Model.StatusFilter == "Lead")">Lead</option>
                                            <option value="Qualified" selected="@(Model.StatusFilter == "Qualified")">Qualified</option>
                                            <option value="Proposal" selected="@(Model.StatusFilter == "Proposal")">Proposal</option>
                                            <option value="Negotiation" selected="@(Model.StatusFilter == "Negotiation")">Negotiation</option>
                                            <option value="Won" selected="@(Model.StatusFilter == "Won")">Won</option>
                                            <option value="Lost" selected="@(Model.StatusFilter == "Lost")">Lost</option>
                                        </select>
                                    </div>
                                    <div class="col-lg-2 col-md-3">
                                        <label class="form-label text-muted fw-semibold">OEM Partner</label>
                                        <input name="oemFilter" value="@Model.OemFilter" class="form-control form-control-sm"
                                            placeholder="Search OEMs..." autocomplete="off" />
                                    </div>
                                    <div class="col-lg-2 col-md-3">
                                        <label class="form-label text-muted fw-semibold">Customer</label>
                                        <input name="customerFilter" value="@Model.CustomerFilter" class="form-control form-control-sm"
                                            placeholder="Search customers..." autocomplete="off" />
                                    </div>
                                    <div class="col-lg-2 col-md-3">
                                        <label class="form-label text-muted fw-semibold">Success Rate</label>
                                        <select name="successFilter" class="form-select form-select-sm">
                                            <option value="">All Rates</option>
                                            <option value="high">High (75%+)</option>
                                            <option value="medium">Medium (25-74%)</option>
                                            <option value="low">Low (0-24%)</option>
                                        </select>
                                    </div>
                                    <div class="col-lg-2 col-md-6">
                                        <label class="form-label text-muted fw-semibold">Quick Actions</label>
                                        <div class="btn-group w-100">
                                            <button type="submit" class="btn btn-primary btn-sm">
                                                <i class="fas fa-search"></i> Apply
                                            </button>
                                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm">
                                                <i class="fas fa-times"></i> Clear
                                            </a>
                                        </div>
                                    </div>
                                    <div class="col-lg-2 col-md-6">
                                        <label class="form-label text-muted fw-semibold">Export</label>
                                        <div class="btn-group w-100">
                                            <a asp-action="ExportToExcel" class="btn btn-success btn-sm w-100">
                                                <i class="fas fa-file-excel"></i> Excel
                                            </a>
                                        </div>
                                    </div>
                                </div>

                                <!-- Advanced Filters Row (Collapsible) -->
                                <div id="advancedFilters" class="collapse">
                                    <hr class="my-3">
                                    <h6 class="text-muted fw-semibold mb-3">
                                        <i class="fas fa-sliders-h"></i> Advanced Filters
                                    </h6>
                                    <div class="row g-3">
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Pipeline Stage</label>
                                            <select name="stageFilter" class="form-select form-select-sm">
                                                <option value="">All Stages</option>
                                                <option value="Lead">Lead</option>
                                                <option value="Qualified">Qualified</option>
                                                <option value="Proposal">Proposal</option>
                                                <option value="Negotiation">Negotiation</option>
                                                <option value="Closing">Closing</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Revenue Range</label>
                                            <select name="revenueFilter" class="form-select form-select-sm">
                                                <option value="">All Amounts</option>
                                                <option value="small">< ₹50k</option>
                                                <option value="medium">₹50k - ₹5L</option>
                                                <option value="large">₹5L - ₹50L</option>
                                                <option value="enterprise">> ₹50L</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Expected Close</label>
                                            <select name="closeDateFilter" class="form-select form-select-sm">
                                                <option value="">All Dates</option>
                                                <option value="overdue">Overdue</option>
                                                <option value="thisweek">This Week</option>
                                                <option value="thismonth">This Month</option>
                                                <option value="nextmonth">Next Month</option>
                                                <option value="thisquarter">This Quarter</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Confidence Level</label>
                                            <select name="confidenceFilter" class="form-select form-select-sm">
                                                <option value="">All Levels</option>
                                                <option value="5">Very High (5)</option>
                                                <option value="4">High (4)</option>
                                                <option value="3">Medium (3)</option>
                                                <option value="2">Low (2)</option>
                                                <option value="1">Very Low (1)</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Last Activity</label>
                                            <select name="activityFilter" class="form-select form-select-sm">
                                                <option value="">All Times</option>
                                                <option value="today">Today</option>
                                                <option value="week">This Week</option>
                                                <option value="month">This Month</option>
                                                <option value="stale">Stale (30+ days)</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-2 col-md-3">
                                            <label class="form-label text-muted fw-semibold">Save View</label>
                                            <button type="button" class="btn btn-outline-info btn-sm w-100" onclick="saveCurrentView()">
                                                <i class="fas fa-bookmark"></i> Save Filter
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>

                    <!-- Projects Table -->
                    @if (Model.Projects.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Product</th>
                                        <th>OEM</th>
                                        <th>Customer</th>
                                        <th>Expected License Date</th>
                                        <th>Pipeline Stage</th>
                                        <th>Status</th>
                                        <th>Success %</th>
                                        <th>Estimated Revenue</th>
                                        <th>Weighted Revenue</th>
                                        <th>Estimated Margin</th>
                                        <th>Confidence</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var project in Model.Projects)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@project.ProductName</strong>
                                                @if (!string.IsNullOrEmpty(project.CustomerPoNumber))
                                                {
                                                    <br>
                                        
                                                    <small class="text-muted">PO: @project.CustomerPoNumber</small>
                                                }
                                            </td>
                                            <td>@project.OemName</td>
                                            <td>
                                                @project.ClientName
                                                @if (!string.IsNullOrEmpty(project.ClientContactEmail))
                                                {
                                                    <br>
                                        
                                                    <small class="text-muted">@project.ClientContactEmail</small>
                                                }
                                            </td>
                                            <td>
                                                @project.ExpectedLicenseDate.ToString("MM/dd/yyyy")
                                                <br><small class="text-muted">Exp:
                                                    @project.ExpectedExpiryDate.ToString("MM/dd/yyyy")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(project.PipelineStage == "Closed Won" ? "success" : 
                                                                      project.PipelineStage == "Closed Lost" ? "danger" :
                                                                      project.PipelineStage == "Negotiation" ? "warning" :
                                                                      project.PipelineStage == "Proposal" ? "info" :
                                                                      project.PipelineStage == "Qualified" ? "primary" : "secondary")">
                                                    @project.PipelineStage
                                                </span>
                                                @if (project.ExpectedCloseDate.HasValue)
                                                {
                                                    <br><small class="text-muted">Close: @project.ExpectedCloseDate.Value.ToString("MM/dd")</small>
                                                }
                                            </td>
                                            <td>
                                                <span
                                                    class="badge bg-@(project.ProjectStatus == "Confirmed" ? "success" : 
                                                                                                                            project.ProjectStatus == "Lost" ? "danger" :
                                                                                                                            project.ProjectStatus == "Negotiation" ? "warning" :
                                                                                                                            project.ProjectStatus == "Pending" ? "info" : "secondary")">
                                                    @project.ProjectStatus
                                                </span>
                                                @if (project.IsConverted)
                                                {
                                                    <br>
                                        
                                                    <span class="badge bg-success">Converted</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar bg-@(project.SuccessProbability >= 75 ? "success" : 
                                                                                                                                            project.SuccessProbability >= 50 ? "info" :
                                                                                                                                            project.SuccessProbability >= 25 ? "warning" : "danger")"
                                                        role="progressbar" style="width: @(project.SuccessProbability)%">
                                                        @(project.SuccessProbability)%
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <strong>@project.EstimatedRevenue.ToString("C")</strong>
                                                <br><small class="text-muted">Legacy: @project.ExpectedAmountToReceive.ToString("C")</small>
                                            </td>
                                            <td class="text-end">
                                                <strong>@project.WeightedRevenue.ToString("C")</strong>
                                                <br><small class="text-muted">@project.SuccessProbability% prob</small>
                                            </td>
                                            <td class="text-end">
                                                <strong>@project.EstimatedMargin.ToString("C")</strong>
                                                <br><small class="text-muted">@project.MarginPercentage.ToString("F1")%</small>
                                            </td>
                                            <td class="text-center">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= project.StageConfidenceLevel ? "text-warning" : "text-muted")"></i>
                                                }
                                                <br><small class="text-muted">@project.StageConfidenceLevel/5</small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <a asp-action="Details" asp-route-id="@project.ProjectPipelineId"
                                                        class="btn btn-outline-info" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a asp-action="Edit" asp-route-id="@project.ProjectPipelineId"
                                                        class="btn btn-outline-warning" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    @if (!project.IsConverted && project.ProjectStatus == "Confirmed")
                                                    {
                                                        <a asp-action="ConvertToLicense" asp-route-id="@project.ProjectPipelineId"
                                                            class="btn btn-outline-success" title="Convert to License"
                                                            onclick="return confirm('Convert this project to an actual license?')">
                                                            <i class="fas fa-exchange-alt"></i>
                                                        </a>
                                                    }
                                                    <a asp-action="Delete" asp-route-id="@project.ProjectPipelineId"
                                                        class="btn btn-outline-danger" title="Delete"
                                                        onclick="return confirm('Are you sure you want to delete this project?')">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-project-diagram fa-3x text-muted mb-3"></i>
                            <h4 class="text-muted">No Projects Found</h4>
                            <p class="text-muted">Start by creating your first project pipeline entry.</p>
                            <a asp-action="Create" class="btn btn-primary">
                                <i class="fas fa-plus"></i> Create First Project
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Week 10 Enhancement: Autocomplete Datalists for Desktop Experience -->
<datalist id="oemSuggestions">
    <!-- Populated via JavaScript -->
</datalist>

<datalist id="customerSuggestions">
    <!-- Populated via JavaScript -->
</datalist>

@section Scripts {
    <script>
        // Week 10 Enhanced: Desktop-First Advanced Filtering with Bigin.com UX
        
        // Auto-submit filters after a delay (enhanced for desktop workflow)
        let filterTimeout;
        document.querySelectorAll('input[name="oemFilter"], input[name="customerFilter"]').forEach(input => {
            input.addEventListener('input', function () {
                clearTimeout(filterTimeout);
                filterTimeout = setTimeout(() => {
                    this.form.submit();
                }, 750); // Slightly increased delay for better desktop UX
            });
        });

        // Week 10 Enhancement: Toggle Advanced Filters
        function toggleAdvancedFilters() {
            const advancedFilters = document.getElementById('advancedFilters');
            const button = event.target.closest('button');
            
            if (advancedFilters.classList.contains('show')) {
                advancedFilters.classList.remove('show');
                button.innerHTML = '<i class="fas fa-cog"></i> More Filters';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-outline-secondary');
            } else {
                advancedFilters.classList.add('show');
                button.innerHTML = '<i class="fas fa-minus"></i> Less Filters';
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-secondary');
            }
        }

        // Week 10 Enhancement: Save Current Filter View (Bigin.com style feature)
        function saveCurrentView() {
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const filters = {};
            
            for (let [key, value] of formData.entries()) {
                if (value) filters[key] = value;
            }
            
            // Save to localStorage for quick access (desktop workflow optimization)
            const savedViews = JSON.parse(localStorage.getItem('pipelineViews') || '[]');
            const viewName = prompt('Enter a name for this filter view:');
            
            if (viewName) {
                const newView = {
                    name: viewName,
                    filters: filters,
                    timestamp: new Date().toISOString()
                };
                
                savedViews.push(newView);
                localStorage.setItem('pipelineViews', JSON.stringify(savedViews));
                
                showToast('Filter view saved successfully!', 'success');
                updateSavedViewsDropdown();
            }
        }

        // Week 10 Enhancement: Quick Filter Shortcuts (Desktop UX)
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + F to focus on customer search
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                document.querySelector('input[name="customerFilter"]').focus();
            }
            
            // Ctrl/Cmd + Shift + F to focus on OEM search
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'F') {
                e.preventDefault();
                document.querySelector('input[name="oemFilter"]').focus();
            }
            
            // Escape to clear all filters
            if (e.key === 'Escape') {
                window.location.href = '@Url.Action("Index")';
            }
        });

        // Week 10 Enhancement: Advanced Search Suggestions (Desktop UX)
        function setupAdvancedSearchSuggestions() {
            const oemInput = document.querySelector('input[name="oemFilter"]');
            const customerInput = document.querySelector('input[name="customerFilter"]');
            
            // Add autocomplete functionality for better desktop experience
            if (oemInput) {
                oemInput.setAttribute('list', 'oemSuggestions');
                // Load OEM suggestions
                fetch('/ProjectPipeline/GetOemSuggestions')
                    .then(response => response.json())
                    .then(data => {
                        const datalist = document.getElementById('oemSuggestions');
                        data.forEach(oem => {
                            const option = document.createElement('option');
                            option.value = oem;
                            datalist.appendChild(option);
                        });
                    })
                    .catch(error => console.log('Error loading OEM suggestions:', error));
            }
            
            if (customerInput) {
                customerInput.setAttribute('list', 'customerSuggestions');
                // Load customer suggestions
                fetch('/ProjectPipeline/GetCustomerSuggestions')
                    .then(response => response.json())
                    .then(data => {
                        const datalist = document.getElementById('customerSuggestions');
                        data.forEach(customer => {
                            const option = document.createElement('option');
                            option.value = customer;
                            datalist.appendChild(option);
                        });
                    })
                    .catch(error => console.log('Error loading customer suggestions:', error));
            }
        }

        // Week 10 Enhancement: Real-time Filter Count Display
        function updateFilterCount() {
            const form = document.querySelector('form');
            const formData = new FormData(form);
            let activeFilters = 0;
            
            for (let [key, value] of formData.entries()) {
                if (value && key !== 'view') activeFilters++;
            }
            
            const filterButton = document.querySelector('button[type="submit"]');
            if (activeFilters > 0) {
                filterButton.innerHTML = `<i class="fas fa-search"></i> Apply (${activeFilters})`;
                filterButton.classList.add('btn-primary');
                filterButton.classList.remove('btn-outline-primary');
            } else {
                filterButton.innerHTML = '<i class="fas fa-search"></i> Apply';
                filterButton.classList.remove('btn-primary');
                filterButton.classList.add('btn-outline-primary');
            }
        }

        // Week 10 Enhancement: Smart Filter Persistence
        function initializeSmartFilters() {
            // Restore last used filters for better desktop workflow
            const lastFilters = JSON.parse(sessionStorage.getItem('lastPipelineFilters') || '{}');
            
            Object.keys(lastFilters).forEach(key => {
                const element = document.querySelector(`[name="${key}"]`);
                if (element && !element.value) {
                    element.value = lastFilters[key];
                }
            });
            
            // Save current filters
            const form = document.querySelector('form');
            form.addEventListener('submit', function() {
                const formData = new FormData(form);
                const filters = {};
                for (let [key, value] of formData.entries()) {
                    if (value) filters[key] = value;
                }
                sessionStorage.setItem('lastPipelineFilters', JSON.stringify(filters));
            });
        }

        // Week 10 Enhancement: Toast Notification System
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 4000);
        }

        // Initialize enhanced desktop features on page load
        document.addEventListener('DOMContentLoaded', function() {
            setupAdvancedSearchSuggestions();
            updateFilterCount();
            initializeSmartFilters();
            
            // Add real-time filter count updates
            document.querySelectorAll('select, input').forEach(element => {
                element.addEventListener('change', updateFilterCount);
                element.addEventListener('input', updateFilterCount);
            });
        });
    </script>
}
