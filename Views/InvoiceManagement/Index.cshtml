@model License_Tracking.ViewModels.InvoiceManagementViewModel

@{
    ViewData["Title"] = "Invoice Management";
}

<!-- Bigin.com-style simple and clean design -->
<div class="container-fluid mt-3">
    <!-- Simple Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="fw-bold text-dark mb-1">
                        <i class="fas fa-file-invoice text-primary"></i>
                        Invoice Management
                    </h2>
                    <p class="text-muted mb-0">CBMS 4-Phase Invoice Tracking System</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Index", "Procurement")" class="btn btn-outline-secondary">
                        <i class="fas fa-shopping-cart"></i> Procurement
                    </a>
                    <div class="dropdown">
                        <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fas fa-plus"></i> Create Invoice
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="showCreateModal('Customer_To_Canarys')">
                                    <i class="fas fa-user"></i> Customer Invoice
                                </a></li>
                            <li><a class="dropdown-item" href="#" onclick="showCreateModal('OEM_To_Canarys')">
                                    <i class="fas fa-industry"></i> OEM Invoice
                                </a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Simple Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="text-primary mb-2">
                        <i class="fas fa-file-alt fa-2x"></i>
                    </div>
                    <h3 class="fw-bold mb-1">@Model.TotalInvoices</h3>
                    <p class="text-muted small mb-0">Total Invoices</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="text-success mb-2">
                        <i class="fas fa-dollar-sign fa-2x"></i>
                    </div>
                    <h3 class="fw-bold mb-1">@Model.TotalAmount.ToString("C")</h3>
                    <p class="text-muted small mb-0">Total Amount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="text-info mb-2">
                        <i class="fas fa-check-circle fa-2x"></i>
                    </div>
                    <h3 class="fw-bold mb-1">@Model.PaidAmount.ToString("C")</h3>
                    <p class="text-muted small mb-0">Paid Amount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="text-warning mb-2">
                        <i class="fas fa-clock fa-2x"></i>
                    </div>
                    <h3 class="fw-bold mb-1">@Model.PendingAmount.ToString("C")</h3>
                    <p class="text-muted small mb-0">Pending Amount</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Bigin.com-style Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light border-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-filter text-primary"></i>
                            Advanced Filters
                        </h6>
                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" 
                                data-bs-target="#advancedFilters" aria-expanded="false">
                            <i class="fas fa-sliders-h"></i> More Filters
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <form method="get" class="needs-validation" novalidate>
                        <!-- Basic Filters Row -->
                        <div class="row g-3 mb-3">
                            <div class="col-md-3">
                                <label class="form-label small fw-semibold">Business Phase</label>
                                @Html.DropDownList("phase", ViewBag.PhaseOptions as SelectList, new { 
                                    @class = "form-select form-select-sm",
                                    onchange = "updatePhaseStats()"
                                })
                            </div>
                            <div class="col-md-3">
                                <label class="form-label small fw-semibold">Payment Status</label>
                                @Html.DropDownList("status", ViewBag.StatusOptions as SelectList, new { 
                                    @class = "form-select form-select-sm",
                                    onchange = "updateStatusStats()"
                                })
                            </div>
                            <div class="col-md-4">
                                <label class="form-label small fw-semibold">Quick Search</label>
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                                    <input type="text" name="search" value="@ViewBag.SearchTerm" 
                                           class="form-control" placeholder="Invoice, Customer, Deal, OEM..." />
                                </div>
                            </div>
                            <div class="col-md-2 d-grid">
                                <button type="submit" class="btn btn-primary btn-sm fw-semibold">
                                    <i class="fas fa-search"></i> Apply Filters
                                </button>
                            </div>
                        </div>

                        <!-- Advanced Filters (Collapsible) -->
                        <div class="collapse" id="advancedFilters">
                            <hr class="my-3">
                            <div class="row g-3 mb-3">
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Customer</label>
                                    <input type="text" name="customer" value="@ViewBag.Customer" 
                                           class="form-control form-control-sm" placeholder="Customer name..." />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">OEM Partner</label>
                                    <input type="text" name="oem" value="@ViewBag.Oem" 
                                           class="form-control form-control-sm" placeholder="OEM name..." />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Start Date</label>
                                    <input type="date" name="startDate" value="@ViewBag.StartDate" 
                                           class="form-control form-control-sm" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">End Date</label>
                                    <input type="date" name="endDate" value="@ViewBag.EndDate" 
                                           class="form-control form-control-sm" />
                                </div>
                            </div>
                            
                            <div class="row g-3 mb-3">
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Min Amount (₹)</label>
                                    <input type="number" name="minAmount" value="@ViewBag.MinAmount" 
                                           class="form-control form-control-sm" step="0.01" placeholder="0.00" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Max Amount (₹)</label>
                                    <input type="number" name="maxAmount" value="@ViewBag.MaxAmount" 
                                           class="form-control form-control-sm" step="0.01" placeholder="999999.99" />
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Sort By</label>
                                    <select name="sortBy" class="form-select form-select-sm">
                                        <option value="date" selected>Invoice Date</option>
                                        <option value="amount">Amount</option>
                                        <option value="customer">Customer</option>
                                        <option value="status">Status</option>
                                        <option value="phase">Phase</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold">Sort Order</label>
                                    <select name="sortDesc" class="form-select form-select-sm">
                                        <option value="true" selected>Newest First</option>
                                        <option value="false">Oldest First</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-success btn-sm">
                                            <i class="fas fa-search"></i> Apply Advanced Filters
                                        </button>
                                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm">
                                            <i class="fas fa-times"></i> Clear All Filters
                                        </a>
                                        <button type="button" class="btn btn-outline-info btn-sm" onclick="exportFilteredData()">
                                            <i class="fas fa-download"></i> Export CSV
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Simple Invoice List -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-semibold">
                            <i class="fas fa-list"></i> Invoices
                            <span class="badge bg-light text-dark">@Model.TotalInvoices</span>
                        </h5>
                        <div class="d-flex gap-2 flex-wrap">
                            <span class="badge bg-primary">Customer Invoices: @Model.Phase1Count</span>
                            <span class="badge bg-warning">OEM Invoices: @Model.Phase4Count</span>
                            @if (Model.OverdueCount > 0)
                            {
                                <span class="badge bg-danger">Overdue: @Model.OverdueCount</span>
                            }
                        </div>
                    </div>
                    
                    <!-- Bulk Actions Toolbar (Hidden by default) -->
                    <div id="bulkActionsToolbar" class="mt-3 p-3 bg-light rounded" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="fw-semibold">
                                    <span id="selectedCount">0</span> invoice(s) selected
                                </span>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-sm btn-outline-info" onclick="exportSelected()">
                                    <i class="fas fa-download"></i> Export Selected
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-success" onclick="bulkRecordPayment()">
                                    <i class="fas fa-money-bill"></i> Record Payment
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="bulkDelete()">
                                    <i class="fas fa-trash"></i> Delete Selected
                                </button>
                                <button type="button" class="btn btn-sm btn-secondary" onclick="clearSelection()">
                                    <i class="fas fa-times"></i> Clear Selection
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (Model.Invoices.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="invoiceTable">
                                <thead class="table-light">
                                    <tr>
                                        <th class="fw-semibold" width="40">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                                <label class="form-check-label" for="selectAll">
                                                    <span class="visually-hidden">Select All</span>
                                                </label>
                                            </div>
                                        </th>
                                        <th class="fw-semibold">Invoice #</th>
                                        <th class="fw-semibold">Phase</th>
                                        <th class="fw-semibold">Deal</th>
                                        <th class="fw-semibold">Company/OEM</th>
                                        <th class="fw-semibold">Amount</th>
                                        <th class="fw-semibold">Status</th>
                                        <th class="fw-semibold">Due Date</th>
                                        <th class="fw-semibold text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var invoice in Model.Invoices)
                                    {
                                        <tr data-invoice-id="@invoice.InvoiceId">
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input invoice-checkbox" type="checkbox" 
                                                           value="@invoice.InvoiceId" onchange="updateBulkActions()">
                                                </div>
                                            </td>
                                            <td class="fw-semibold text-primary">
                                                <a asp-action="Details" asp-route-id="@invoice.InvoiceId"
                                                    class="text-decoration-none">
                                                    @invoice.InvoiceNumber
                                                </a>
                                            </td>
                                            <td>
                                                @if (invoice.BusinessPhase == 1)
                                                {
                                                    <span class="badge bg-primary">Phase 1</span>
                                                }
                                                else if (invoice.BusinessPhase == 2)
                                                {
                                                    <span class="badge bg-info">Phase 2</span>
                                                }
                                                else if (invoice.BusinessPhase == 3)
                                                {
                                                    <span class="badge bg-success">Phase 3</span>
                                                }
                                                else if (invoice.BusinessPhase == 4)
                                                {
                                                    <span class="badge bg-warning text-dark">Phase 4</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Unknown</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="fw-semibold">@(invoice.Deal?.DealName ?? "N/A")</div>
                                                <small class="text-muted">@(invoice.Deal?.Product?.ProductName ?? "N/A")</small>
                                            </td>
                                            <td>
                                                @if (invoice.BusinessPhase == 1 || invoice.BusinessPhase == 3)
                                                {
                                                    <div class="fw-semibold">@(invoice.Deal?.Company?.CompanyName ?? "N/A")</div>
                                                    <small class="text-muted">
                                                        @if (invoice.BusinessPhase == 1) { <text>Customer</text> }
                                                        else { <text>License Settlement</text> }
                                                    </small>
                                                }
                                                else if (invoice.BusinessPhase == 2 || invoice.BusinessPhase == 4)
                                                {
                                                    <div class="fw-semibold">@(invoice.Deal?.Oem?.OemName ?? "N/A")</div>
                                                    <small class="text-muted">
                                                        @if (invoice.BusinessPhase == 2) { <text>OEM Quote</text> }
                                                        else { <text>OEM Invoice</text> }
                                                    </small>
                                                }
                                                else
                                                {
                                                    <div class="fw-semibold">Unknown</div>
                                                    <small class="text-muted">N/A</small>
                                                }
                                            </td>
                                            <td>
                                                <div class="fw-bold">@invoice.TotalAmount.ToString("C")</div>
                                                @if ((invoice.PaymentReceived ?? 0) > 0)
                                                {
                                                    <small class="text-success">Paid: @((invoice.PaymentReceived ??
                                                                                                    0).ToString("C"))</small>
                                                }
                                            </td>
                                            <td>
                                                @switch (invoice.PaymentStatus)
                                                {
                                                    case "Paid":
                                                        <span class="badge bg-success">Paid</span>
                                                        break;
                                                    case "Partial":
                                                        <span class="badge bg-info">Partial</span>
                                                        break;
                                                    case "Overdue":
                                                        <span class="badge bg-danger">Overdue</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@invoice.PaymentStatus</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <div>@(invoice.DueDate?.ToString("MMM dd, yyyy") ?? "N/A")</div>
                                                @if (invoice.DueDate < DateTime.Today && invoice.PaymentStatus != "Paid")
                                                {
                                                    <small class="text-danger">
                                                        <i class="fas fa-exclamation-triangle"></i> Overdue
                                                    </small>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <a asp-action="Details" asp-route-id="@invoice.InvoiceId"
                                                        class="btn btn-outline-primary" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    @if (invoice.PaymentStatus != "Paid")
                                                    {
                                                        <a asp-action="Edit" asp-route-id="@invoice.InvoiceId"
                                                            class="btn btn-outline-secondary" title="Edit Invoice">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <a asp-action="RecordPayment" asp-route-id="@invoice.InvoiceId"
                                                            class="btn btn-outline-success" title="Record Payment">
                                                            <i class="fas fa-money-bill"></i>
                                                        </a>
                                                    }
                                                    
                                                    <!-- Dropdown for more actions -->
                                                    <div class="btn-group btn-group-sm">
                                                        <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" 
                                                                data-bs-toggle="dropdown" aria-expanded="false" title="More Actions">
                                                            <span class="visually-hidden">Toggle Dropdown</span>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            @if (!string.IsNullOrEmpty(invoice.AttachmentFileName))
                                                            {
                                                                <li>
                                                                    <a class="dropdown-item" href="@invoice.AttachmentPath" target="_blank">
                                                                        <i class="fas fa-download text-primary"></i> Download Attachment
                                                                    </a>
                                                                </li>
                                                            }
                                                            <li>
                                                                <a class="dropdown-item" href="#" onclick="duplicateInvoice(@invoice.InvoiceId)">
                                                                    <i class="fas fa-copy text-info"></i> Duplicate
                                                                </a>
                                                            </li>
                                                            @if (invoice.PaymentStatus == "Unpaid")
                                                            {
                                                                <li><hr class="dropdown-divider"></li>
                                                                <li>
                                                                    <a class="dropdown-item text-danger" href="#" onclick="deleteInvoice(@invoice.InvoiceId)">
                                                                        <i class="fas fa-trash"></i> Delete
                                                                    </a>
                                                                </li>
                                                            }
                                                        </ul>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="text-muted mb-3">
                                <i class="fas fa-file-invoice fa-3x"></i>
                            </div>
                            <h5 class="text-muted">No Invoices Found</h5>
                            <p class="text-muted">No invoices match your current filter criteria.</p>
                            <a href="#" onclick="showCreateModal(1)" class="btn btn-primary">
                                <i class="fas fa-plus"></i> Create Your First Invoice
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Simple Create Invoice Modal -->
<div class="modal fade" id="createInvoiceModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus"></i> Create Invoice
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-semibold">Select Deal</label>
                    <select id="dealSelect" class="form-select">
                        <option value="">Loading deals...</option>
                    </select>
                </div>
                <div id="dealInfo" class="alert alert-info d-none">
                    <strong>Deal Details:</strong>
                    <div id="dealDetails"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="proceedToCreate()">
                    <i class="fas fa-arrow-right"></i> Proceed
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Bigin.com-style Invoice Management JavaScript
        let currentPhase = 1;
        let selectedInvoices = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Auto-refresh overdue notifications
            loadOverdueNotifications();
            setInterval(loadOverdueNotifications, 300000); // Every 5 minutes
        });

        // Create Invoice Modal Functions
        function showCreateModal(invoiceType) {
            if (invoiceType !== 'Customer_To_Canarys' && invoiceType !== 'OEM_To_Canarys') {
                alert('Invalid invoice type. Please select Customer or OEM invoice.');
                return;
            }

            const modal = new bootstrap.Modal(document.getElementById('createInvoiceModal'));

            // Update modal title based on invoice type
            const titles = {
                'Customer_To_Canarys': 'Create Customer Invoice',
                'OEM_To_Canarys': 'Create OEM Invoice'
            };
            
            document.querySelector('#createInvoiceModal .modal-title').innerHTML =
                `<i class="fas fa-plus"></i> ${titles[invoiceType]}`;

            // Load available deals
            loadDeals(invoiceType);
            modal.show();
        }

        function loadDeals(invoiceType) {
            const select = document.getElementById('dealSelect');
            select.innerHTML = '<option value="">Loading deals...</option>';

            fetch(`/InvoiceManagement/GetAvailableDeals?invoiceType=${invoiceType}`)
                .then(response => response.json())
                .then(data => {
                    select.innerHTML = '<option value="">Select a deal...</option>';
                    data.forEach(deal => {
                        const option = document.createElement('option');
                        option.value = deal.value;
                        option.textContent = deal.text;
                        option.dataset.customer = deal.customer;
                        option.dataset.product = deal.product;
                        option.dataset.oem = deal.oem;
                        option.dataset.invoiceType = invoiceType;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading deals:', error);
                    select.innerHTML = '<option value="">Error loading deals</option>';
                });
        }

        function proceedToCreate() {
            const dealId = document.getElementById('dealSelect').value;
            const selectedOption = document.getElementById('dealSelect').selectedOptions[0];
            
            if (!dealId) {
                alert('Please select a deal first.');
                return;
            }

            const invoiceType = selectedOption.dataset.invoiceType;
            window.location.href = `/InvoiceManagement/Create?dealId=${dealId}&invoiceType=${invoiceType}`;
        }

        // Bulk Actions Functions
        function toggleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const invoiceCheckboxes = document.querySelectorAll('.invoice-checkbox');
            
            invoiceCheckboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
            
            updateBulkActions();
        }

        function updateBulkActions() {
            const invoiceCheckboxes = document.querySelectorAll('.invoice-checkbox:checked');
            const selectedCount = invoiceCheckboxes.length;
            const bulkToolbar = document.getElementById('bulkActionsToolbar');
            const selectAllCheckbox = document.getElementById('selectAll');
            
            // Update selected invoices array
            selectedInvoices = Array.from(invoiceCheckboxes).map(cb => parseInt(cb.value));
            
            // Show/hide bulk actions toolbar
            if (selectedCount > 0) {
                bulkToolbar.style.display = 'block';
                document.getElementById('selectedCount').textContent = selectedCount;
            } else {
                bulkToolbar.style.display = 'none';
            }
            
            // Update select all checkbox state
            const totalCheckboxes = document.querySelectorAll('.invoice-checkbox').length;
            selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < totalCheckboxes;
            selectAllCheckbox.checked = selectedCount === totalCheckboxes;
        }

        function clearSelection() {
            document.querySelectorAll('.invoice-checkbox, #selectAll').forEach(cb => cb.checked = false);
            updateBulkActions();
        }

        function exportSelected() {
            if (selectedInvoices.length === 0) {
                alert('Please select invoices to export.');
                return;
            }
            
            const params = new URLSearchParams(window.location.search);
            params.set('selectedIds', selectedInvoices.join(','));
            window.location.href = `/InvoiceManagement/ExportCsv?${params.toString()}`;
        }

        function exportFilteredData() {
            const params = new URLSearchParams(window.location.search);
            window.location.href = `/InvoiceManagement/ExportCsv?${params.toString()}`;
        }

        function bulkRecordPayment() {
            if (selectedInvoices.length === 0) {
                alert('Please select invoices to record payment for.');
                return;
            }
            
            // Show bulk payment modal (would need to create this)
            showBulkPaymentModal();
        }

        function bulkDelete() {
            if (selectedInvoices.length === 0) {
                alert('Please select invoices to delete.');
                return;
            }
            
            if (confirm(`Are you sure you want to delete ${selectedInvoices.length} selected invoice(s)? This action cannot be undone.`)) {
                // Call bulk delete endpoint
                fetch('/InvoiceManagement/BulkDelete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ SelectedInvoiceIds: selectedInvoices })
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error deleting invoices. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting invoices. Please try again.');
                });
            }
        }

        // Individual Invoice Actions
        function deleteInvoice(invoiceId) {
            if (confirm('Are you sure you want to delete this invoice? This action cannot be undone.')) {
                fetch(`/InvoiceManagement/Delete/${invoiceId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error deleting invoice. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting invoice. Please try again.');
                });
            }
        }

        function duplicateInvoice(invoiceId) {
            if (confirm('Create a duplicate of this invoice?')) {
                window.location.href = `/InvoiceManagement/Duplicate/${invoiceId}`;
            }
        }

        // Notification Functions
        function loadOverdueNotifications() {
            fetch('/InvoiceManagement/GetOverdueInvoices')
                .then(response => response.json())
                .then(data => {
                    if (data.length > 0) {
                        showOverdueNotification(data);
                    }
                })
                .catch(error => console.error('Error loading overdue notifications:', error));
        }

        function showOverdueNotification(overdueInvoices) {
            // Create a subtle notification for overdue invoices
            const existingNotification = document.querySelector('.overdue-notification');
            if (existingNotification) return; // Don't show multiple notifications

            const notification = document.createElement('div');
            notification.className = 'alert alert-warning alert-dismissible fade show overdue-notification';
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.width = '300px';
            notification.style.zIndex = '9999';
            notification.innerHTML = `
                <strong><i class="fas fa-exclamation-triangle"></i> Overdue Invoices!</strong><br>
                You have ${overdueInvoices.length} overdue invoice(s) requiring attention.
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto-dismiss after 10 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 10000);
        }

        // Filter and Search Functions
        function updatePhaseStats() {
            // Update phase statistics when phase filter changes
            const phase = document.querySelector('select[name="phase"]').value;
            // This could trigger an AJAX call to update statistics
        }

        function updateStatusStats() {
            // Update status statistics when status filter changes
            const status = document.querySelector('select[name="status"]').value;
            // This could trigger an AJAX call to update statistics
        }

        // Show deal details when selected in modal
        document.addEventListener('DOMContentLoaded', function() {
            const dealSelect = document.getElementById('dealSelect');
            if (dealSelect) {
                dealSelect.addEventListener('change', function () {
                    const option = this.options[this.selectedIndex];
                    const dealInfo = document.getElementById('dealInfo');
                    const dealDetails = document.getElementById('dealDetails');

                    if (this.value && option.dataset.customer) {
                        dealDetails.innerHTML = `
                            <div><strong>Customer:</strong> ${option.dataset.customer}</div>
                            <div><strong>Product:</strong> ${option.dataset.product}</div>
                            <div><strong>OEM:</strong> ${option.dataset.oem}</div>
                        `;
                        dealInfo.classList.remove('d-none');
                    } else {
                        dealInfo.classList.add('d-none');
                    }
                });
            }
        });

        // Enhanced Table Interactions
        document.addEventListener('DOMContentLoaded', function() {
            // Add hover effects and row highlighting
            const tableRows = document.querySelectorAll('#invoiceTable tbody tr');
            tableRows.forEach(row => {
                row.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = '#f8f9fa';
                });
                row.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '';
                });
            });
        });
    </script>
}
