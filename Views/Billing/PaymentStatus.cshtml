@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Payment Status";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2><i class="fas fa-money-bill"></i> Payment Status</h2>
        <div>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-dashboard"></i> Dashboard
            </a>
            <a asp-action="GenerateInvoice" class="btn btn-primary">
                <i class="fas fa-plus"></i> Generate New Invoice
            </a>
            <a asp-action="AgingSummary" class="btn btn-info">
                <i class="fas fa-chart-line"></i> View Aging Summary
            </a>
        </div>
    </div>

    <!-- Filter Controls -->
    <div class="row mb-3">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Filter by Invoice Type</h6>
                    <form method="get" asp-action="PaymentStatus">
                        <div class="input-group">
                            <select name="invoiceType" class="form-control">
                                @foreach (var option in ViewBag.InvoiceTypes as SelectList)
                                {
                                    <option value="@option.Value" selected="@option.Selected">@option.Text</option>
                                }
                            </select>
                            <button type="submit" class="btn btn-outline-primary">
                                <i class="fas fa-filter"></i> Filter
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">Quick Actions for Existing Licenses</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-muted">Generate invoices automatically from licenses:</small>
                        </div>
                        <div class="col-md-6 text-end">
                            <button type="button" class="btn btn-sm btn-primary" onclick="showAutoInvoiceModal()">
                                <i class="fas fa-magic"></i> Auto-Generate from Licenses
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Invoice Number</th>
                    <th>Type</th>
                    <th>Product/Service</th>
                    <th>Client/Vendor</th>
                    <th>Amount</th>
                    <th>Received</th>
                    <th>Outstanding</th>
                    <th>Status</th>
                    <th>Due Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr
                        class="@(item.IsOverdue ? "table-danger" : (item.PaymentStatus == "Completed" ? "table-success" : ""))">
                        <td>
                            <strong>@item.InvoiceNumber</strong>
                            @if (!string.IsNullOrEmpty(item.Description))
                            {
                                <br>
                        
                                <small class="text-muted">@item.Description</small>
                            }
                        </td>
                        <td>
                            <span class="badge @(item.InvoiceType == "Customer" ? "bg-primary" : "bg-warning text-dark")">
                                @item.InvoiceType
                            </span>
                        </td>
                        <td>@(item.Product?.ProductName ?? item.ProductName ?? "N/A")</td>
                        <td>
                            @(item.Company?.CompanyName ?? item.ClientName ?? "N/A")
                            @if (!string.IsNullOrEmpty(item.VendorName) && item.VendorName != (item.Company?.CompanyName ?? item.ClientName))
                            {
                                <br>
                        
                                <small class="text-muted">@item.VendorName</small>
                            }
                        </td>
                        <td><strong>@item.Amount.ToString("C")</strong></td>
                        <td>@item.AmountReceived.ToString("C")</td>
                        <td>
                            @if (item.OutstandingAmount > 0)
                            {
                                <span class="text-danger"><strong>@item.OutstandingAmount.ToString("C")</strong></span>
                            }
                            else
                            {
                                <span class="text-success">$0.00</span>
                            }
                        </td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(item.PaymentStatus)">
                                @item.PaymentStatus
                            </span>
                            @if (item.IsOverdue)
                            {
                                <br>
                        
                                <small class="text-danger"><i class="fas fa-exclamation-triangle"></i> Overdue</small>
                            }
                        </td>
                        <td>@item.DueDate.ToString("MMM dd, yyyy")</td>
                        <td>
                            <div class="btn-group-vertical btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm"
                                    onclick="updatePayment(@item.InvoiceId, '@item.InvoiceNumber', @item.Amount, @item.AmountReceived, '@item.PaymentStatus')">
                                    <i class="fas fa-edit"></i> Update
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            <h5><i class="fas fa-info-circle"></i> No Invoices Found</h5>
            <p>No invoices match the current filter criteria. <a asp-action="GenerateInvoice"
                    class="btn btn-primary btn-sm">Generate your first invoice</a></p>
        </div>
    }
</div>

<!-- Update Payment Modal -->
<div class="modal fade" id="updatePaymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Payment Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="UpdatePaymentStatus" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="updateInvoiceId" name="invoiceId" />
                    <div class="mb-3">
                        <label class="form-label">Invoice Number</label>
                        <input type="text" id="updateInvoiceNumber" class="form-control" readonly />
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Payment Status</label>
                            <select name="paymentStatus" id="updatePaymentStatus" class="form-control">
                                <option value="Pending">Pending</option>
                                <option value="Partial">Partial</option>
                                <option value="Completed">Completed</option>
                                <option value="Overdue">Overdue</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Amount Received</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" name="amountReceived" id="updateAmountReceived"
                                    class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Total Amount</label>
                        <input type="text" id="updateTotalAmount" class="form-control" readonly />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Payment</button>
                </div>
            </form>
        </div>
    </div>
</div>

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success",
            "Pending" => "bg-warning text-dark",
            "Partial" => "bg-info",
            "Overdue" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        function updatePayment(invoiceId, invoiceNumber, totalAmount, amountReceived, currentStatus) {
            document.getElementById('updateInvoiceId').value = invoiceId;
            document.getElementById('updateInvoiceNumber').value = invoiceNumber;
            document.getElementById('updateTotalAmount').value = '$' + totalAmount.toFixed(2);
            document.getElementById('updateAmountReceived').value = amountReceived;
            document.getElementById('updatePaymentStatus').value = currentStatus;

            new bootstrap.Modal(document.getElementById('updatePaymentModal')).show();
        }
    </script>
}
<br>

<br>


               
                                   